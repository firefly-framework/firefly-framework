#  Copyright (c) 2019 JD Williams
#
#  This file is part of Firefly, a Python SOA framework built by JD Williams. Firefly is free software; you can
#  redistribute it and/or modify it under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 3 of the License, or (at your option) any later version.
#
#  Firefly is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details. You should have received a copy of the GNU Lesser General Public
#  License along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  You should have received a copy of the GNU General Public License along with Firefly. If not, see
#  <http://www.gnu.org/licenses/>.
import json

# with open('1_output.json', 'w') as fp:
#     fp.write(json.dumps({'resource': '/hello-world/say-hell/Gang', 'path': '/hello-world/say-hell/Gang', 'httpMethod': 'GET', 'requestContext': {'resourcePath': '/api/hello-world/say-hell/Gang', 'httpMethod': 'GET', 'path': '/hello-world/say-hell/Gang'}, 'headers': {'accept-encoding': 'gzip', 'cache-control': 'no-cache', 'content-length': '0', 'host': 'fyyfi6211e.execute-api.us-west-2.amazonaws.com', 'pragma': 'no-cache', 'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="99"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Linux"', 'sec-fetch-dest': 'document', 'sec-fetch-mode': 'navigate', 'sec-fetch-site': 'none', 'sec-fetch-user': '?1', 'upgrade-insecure-requests': '1', 'user-agent': 'Amazon CloudFront', 'via': '2.0 de33a243d95a626772ee38d6f5849f96.cloudfront.net (CloudFront)', 'x-amz-cf-id': 'CZ3enIWRm_8zccujpqTdcHaIy_KUW4UBovN0H_ZnPO5vknayxq1DUQ==', 'x-amzn-trace-id': 'Root=1-62582e02-665ecde97291dc1e7d875093', 'x-forwarded-for': '35.161.159.188, 70.132.37.69', 'x-forwarded-port': '443', 'x-forwarded-proto': 'https'}, 'queryStringParameters': None, 'pathParameters': None, 'stageVariables': None, 'body': None, 'isBase64Encoded': False, 'multiValueQueryStringParameters': {}}))


for con, table in (('access_lists_pkey','access_lists'),('authorization_codes_pkey','authorization_codes'),('bearer_tokens_pkey','bearer_tokens'),('clients_pkey','clients'),('cohort_members_pkey','cohort_members'),('cohorts_pkey','cohorts'),('employees_pkey','employees'),('idx_iaaa_landing_page_configs_slug','landing_page_configs'),('old_landing_page_configs_pkey','landing_page_configs'),('meta_pkey','meta'),('idx_iaaa_access_lists_scope','old_access_lists'),('old_access_lists_pkey','old_access_lists'),('idx_iaaa_authorization_codes_client','old_authorization_codes'),('idx_iaaa_authorization_codes_code','old_authorization_codes'),('old_authorization_codes_pkey','old_authorization_codes'),('idx_iaaa_bearer_tokens_access_token','old_bearer_tokens'),('idx_iaaa_bearer_tokens_client','old_bearer_tokens'),('idx_iaaa_bearer_tokens_refresh_token','old_bearer_tokens'),('idx_iaaa_bearer_tokens_user','old_bearer_tokens'),('old_bearer_tokens_pkey','old_bearer_tokens'),('idx_iaaa_clients_client_id','old_clients'),('idx_iaaa_clients_external_id','old_clients'),('idx_iaaa_clients_tenant','old_clients'),('idx_iaaa_clients_tenant_id','old_clients'),('old_clients_pkey','old_clients'),('idx_iaaa_cohort_members_cohort','old_cohort_members'),('idx_iaaa_cohort_members_user','old_cohort_members'),('old_cohort_members_pkey','old_cohort_members'),('idx_iaaa_cohorts_name','old_cohorts'),('idx_iaaa_cohorts_slug','old_cohorts'),('idx_iaaa_cohorts_tenant','old_cohorts'),('old_cohorts_pkey','old_cohorts'),('idx_iaaa_employees_tenant','old_employees'),('idx_iaaa_employees_user','old_employees'),('old_employees_pkey','old_employees'),('old_grants_pkey','old_grants'),('idx_iaaa_meta_name','old_meta'),('idx_iaaa_meta_tenant','old_meta'),('old_meta_pkey','old_meta'),('idx_iaaa_roles_name','old_roles'),('old_roles_pkey','old_roles'),('old_scopes_pkey','old_scopes'),('old_tenants_pkey','old_tenants'),('idx_iaaa_users_deleted_at','old_users'),('idx_iaaa_users_email','old_users'),('idx_iaaa_users_preferred_username','old_users'),('idx_iaaa_users_tenant','old_users'),('idx_iaaa_users_tenant_id','old_users'),('old_users_pkey','old_users'),('roles_pkey','roles'),('scopes_pkey','scopes'),('tenants_pkey','tenants'),('users_pkey','users')):
    # print(f"alter table iaaa.{table} rename constraint {con} to old_{con};")
    print(f"alter index iaaa.{con} rename to old_{con};")
